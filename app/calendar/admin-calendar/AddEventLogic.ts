import { useState, useEffect } from "react";
import { Amplify } from "aws-amplify";
import outputs from "@/amplify_outputs.json";
import moment from "moment";
import { generateClient } from "aws-amplify/data";
import type { Schema } from "@/amplify/data/resource"; // Path to the schema generated by Amplify
//import { Sanitize } from "../supportFunctions/SanitizeInput";
//import { PhoneSanitize } from "../supportFunctions/SanitizePhoneNum";
import _ from "lodash"; // for binary seachability
import useAdminCalendar from "./AdminCalendarLogic";



Amplify.configure(outputs);

const client = generateClient<Schema>();

const dateTimeFormat = "YYYY-MM-DD HH:mm";

const useAddEvent = () => {

    const {
        isAddEventModalOpen,
        setIsAddEventModalOpen, 
    } = useAdminCalendar();

      const [eventTitle, setEventTitle] = useState("");
      const [eventStartDate, setEventStartDate] = useState("");
      const [eventStartHour, setEventStartHour] = useState("");
      const [eventStartMin, setEventStartMin] = useState("");
      const [eventStartPeriod, setEventStartPeriod] = useState("");
      const [eventEndDate, setEventEndDate] = useState("");
      const [eventEndHour, setEventEndHour] = useState("");
      const [eventEndMin, setEventEndMin] = useState("");
      const [eventEndPeriod, setEventEndPeriod] = useState("");
      const [eventLocation, setEventLocation] = useState("");
      const [eventDetails, setEventDetails] = useState("");
      const [allday, setIsAllDay] = useState(false);
      const [errorMessage, setErrorMessage] = useState("");

      const closeAddEventModal = () => {
        setIsAddEventModalOpen(false);
        console.log(isAddEventModalOpen);
    };
      
        const handleSubmit = async (e: React.FormEvent) => {
          e.preventDefault();
      
          if (!eventTitle.trim()) {
            setErrorMessage("Event title cannot be empty.");
            return;
          }
      
          const startTime = formatDateTime(
            eventStartDate,
            eventStartHour,
            eventStartMin,
            eventStartPeriod
          );
      
          const endTime = formatDateTime(
            eventEndDate,
            eventEndHour,
            eventEndMin,
            eventEndPeriod
          );
      
          console.log("Formatted Start Time:", startTime);
          console.log("Formatted End Time:", endTime);
        };
      
        const formatDateTime = (
          date: string,
          hour: string,
          minute: string,
          period: string
        ) => {
          const hours =
            period === "PM" ? (parseInt(hour) % 12) + 12 : parseInt(hour) % 12;
          return `${date}T${hours.toString().padStart(2, "0")}:${minute}:00`;
        };

return {
    eventTitle,
    eventStartDate,
    eventStartMin,
    eventStartHour,
    eventStartPeriod, 
    eventEndDate, 
    eventEndHour, 
    eventEndMin, 
    eventEndPeriod,
    eventLocation,
    eventDetails,
    allday, 
    errorMessage,
    setEventTitle,
    setEventStartDate,
    setEventStartMin,
    setEventStartHour,
    setEventStartPeriod, 
    setEventEndDate,
    setEventEndHour,
    setEventEndMin,
    setEventEndPeriod, 
    setEventLocation,
    setEventDetails,
    setIsAllDay,
    setErrorMessage,
    handleSubmit,
    closeAddEventModal,
};
};
export default useAddEvent;
  