import moment from "moment";
import { Event } from "./AdminEventDetails";
import { Event as RBCEvent, Views } from "react-big-calendar";
import { useCollapse } from "@/app/supportFunctions/ToggleCollase";
import { useState, useEffect } from "react";
import { Amplify } from "aws-amplify";
import outputs from "@/amplify_outputs.json";
import { generateClient } from "aws-amplify/data";
import type { Schema } from "@/amplify/data/resource"; // Path to the schema generated by Amplify
import _ from "lodash"; // for binary searchability

Amplify.configure(outputs);

// Generate the Amplify client
const client = generateClient<Schema>();

// Event data
export const events: Event[] = [
  {
    start: moment("2025-02-18T10:00:00").toDate(),
    end: moment("2025-02-18T11:00:00").toDate(),
    title: "Event 1",
    allDay: false,
    details: "test 1",
  },
  {
    start: moment("2025-02-14T10:00:00").toDate(),
    end: moment("2025-02-14T11:00:00").toDate(),
    title: "Event 2",
    allDay: false,
    details: "test 2",
  },
  {
    start: moment("2025-02-17T10:00:00").toDate(),
    end: moment("2025-02-17T11:00:00").toDate(),
    title: "Event 3",
    allDay: false,
    details: "test 3",
  },
];

// Define a custom type for calendar views
type ViewType = 'month' | 'week' | 'day'; // or any other specific views

const useAdminCalendar = () => {
  const [currentDate, setCurrentDate] = useState(new Date());
  const [selectedEvent, setSelectedEvent] = useState<Event | null>(null);
  
  // Set the view state with the custom ViewType type
  const [view, setView] = useState<ViewType>('month'); // Default to 'month'

  const [isAddEventModalOpen, setIsAddEventModalOpen] = useState(false);
  const [newEvent, setNewEvent] = useState({
    eventTitle: "",
    eventStartDate: "",
    eventEndDate: "",
    eventStartTime: "",
    eventEndTime: "",
    eventLocation: "",
    eventDetails: "",
    allday: false,
  });

  // Handle event selection
  const handleEventSelect = (event: RBCEvent) => {
    setSelectedEvent(event as Event);
  };

  const handleNavigate = (newDate: Date) => {
    setCurrentDate(newDate);
  };

  // Handle changing the calendar view
  const handleViewChange = (newView: ViewType) => {
    setView(newView); // Set the view to one of the defined 'ViewType' values
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    console.log("Submitting event...");
    // Add logic to submit the form data
  };

  const { isContentCollapsed, toggleCollapse } = useCollapse();

  const openAddEventModal = () => {
    setIsAddEventModalOpen(true);
    setSelectedEvent(null);
  };

  const closeAddEventModalAdmin = () => {
    setIsAddEventModalOpen(false);
  };

  const closeEventDetailsModal = () => {
    setSelectedEvent(null);
  };

  return {
    currentDate,
    setCurrentDate,
    selectedEvent,
    setSelectedEvent, // Added this so it's accessible in AdminCalendar.tsx
    view,
    setView,
    events,
    handleEventSelect,
    handleNavigate,
    handleViewChange,
    handleSubmit,
    openAddEventModal,
    closeAddEventModalAdmin,
    closeEventDetailsModal,
    isAddEventModalOpen,
    newEvent,
    setNewEvent,
    isContentCollapsed,
    toggleCollapse,
    setIsAddEventModalOpen,
  };
};

export default useAdminCalendar;
