import React, { useEffect, useState } from "react";
import moment from "moment";
import CalendarLocal, { localizer } from "./CalendarLocal";
import withDragAndDrop from "react-big-calendar/lib/addons/dragAndDrop";
import { generateClient } from "aws-amplify/data";
import type { Schema } from "@/amplify/data/resource";  // Path to the schema generated by Amplify

const DndDCalendar = withDragAndDrop(CalendarLocal);

// Generate the Amplify client
const client = generateClient<Schema>();

const ControlCalendar = () => {
  // State to hold events fetched from the database
  const [events, setEvents] = useState<any[]>([]);

  // Fetch events from the database using Amplify client
  useEffect(() => {
    const fetchEvents = async () => {
      try {
        const { data } = await client.models.Event.list();  // Using Amplify's Data client to fetch events
        // Convert the fetched events into the format expected by react-big-calendar
        const calendarEvents = data.map((event) => ({
          start: moment(event.eventStartDate).toDate(), // Convert string date to Date object
          end: moment(event.eventEndDate).toDate(),     // Convert string date to Date object
          title: event.eventTitle,
          allDay: event.allday,
        }));
        setEvents(calendarEvents);  // Update state with formatted events
      } catch (error) {
        console.error("Error fetching events: ", error);
      }
    };

    fetchEvents();
  }, []);  // Empty dependency array ensures this runs only once when the component mounts

  return (
    <DndDCalendar
      localizer={localizer}
      events={events}  // Pass the fetched events to the calendar
      draggableAccessor={(event) => true}  // Enable drag-and-drop functionality
    />
  );
};

export default ControlCalendar;
